{
  "hd1-1": {
    "prefix": "hd1-1",
    "description": "",
    "body": [
      "# When there is 1 freight pallet in the plane.",
      "# Pallets sale = min(demand_pallets and 1),thus:",
      "",
      "pallets_Out_sale = np.minimum(demand_pal_Out_rvs, np.ones(N) * 1)",
      "pallets_In_sale = np.minimum(demand_pal_In_rvs, np.ones(N) * 1)",
      "",
      "# number_of_seats_In_and_Out_available = seats_capacity - taken_by_each_pallet",
      "",
      "seats_Out_available = seats_capacity - pallets_Out_sale * 24",
      "seats_Out_sale = np.minimum(demand_seats_Out_rvs, seats_Out_available)",
      "",
      "seats_In_available = seats_capacity - pallets_In_sale * 24",
      "seats_In_sale = np.minimum(demand_seats_In_rvs, seats_In_available)",
      "",
      "profit_Out = seats_Out_sale * 50 + pallets_Out_sale * 275",
      "profit_In = seats_In_sale * 50 + pallets_In_sale * 275",
      "",
      "profit_total = profit_Out + profit_In",
      "mean_profit_1 = np.mean(profit_total)",
      "",
      "print(f\"When there is 1 freight pallet in the plane.\\nthe mean of the profit is {mean_profit_1}\")",
      ""
    ]
  },
  "hd1-2": {
    "prefix": "hd1-2",
    "description": "",
    "body": [
      "# Similary, when there are 2 pallets in the plane.",
      "# Pallets sale = min(demand_pallets and 2),thus:",
      "",
      "pallets_Out_sale = np.minimum(demand_pal_Out_rvs, np.ones(N) * 2)",
      "pallets_In_sale = np.minimum(demand_pal_In_rvs, np.ones(N) * 2)",
      "",
      "# number_of_seats_In_and_Out_available = seats_capacity - taken_by_each_pallet",
      "",
      "seats_Out_available = seats_capacity - pallets_Out_sale * 24",
      "seats_Out_sale = np.minimum(demand_seats_Out_rvs, seats_Out_available)",
      "",
      "seats_In_available = seats_capacity - pallets_In_sale * 24",
      "seats_In_sale = np.minimum(demand_seats_In_rvs, seats_In_available)",
      "",
      "profit_Out = seats_Out_sale * 50 + pallets_Out_sale * 275",
      "profit_In = seats_In_sale * 50 + pallets_In_sale * 275",
      "",
      "profit_total = profit_Out + profit_In",
      "mean_profit_2 = np.mean(profit_total)",
      "",
      "print(f\"When there is 2 freight pallet in the plane.\\nthe mean of the profit is {mean_profit_2}\")",
      ""
    ]
  },
  "hd1-3": {
    "prefix": "hd1-3",
    "description": "",
    "body": [
      "# Similary, when there are 3 pallets in the plane.",
      "# Pallets sale = min(demand_pallets and 3),thus:",
      "",
      "pallets_Out_sale = np.minimum(demand_pal_Out_rvs, np.ones(N) * 3)",
      "pallets_In_sale = np.minimum(demand_pal_In_rvs, np.ones(N) * 3)",
      "",
      "# number_of_seats_In_and_Out_available = seats_capacity - taken_by_each_pallet",
      "",
      "seats_Out_available = seats_capacity - pallets_Out_sale * 24",
      "seats_Out_sale = np.minimum(demand_seats_Out_rvs, seats_Out_available)",
      "",
      "seats_In_available = seats_capacity - pallets_In_sale * 24",
      "seats_In_sale = np.minimum(demand_seats_In_rvs, seats_In_available)",
      "",
      "profit_Out = seats_Out_sale * 50 + pallets_Out_sale * 275",
      "profit_In = seats_In_sale * 50 + pallets_In_sale * 275",
      "",
      "profit_total = profit_Out + profit_In",
      "mean_profit_3 = np.mean(profit_total)",
      "",
      "print(f\"When there is 3 freight pallet in the plane.\\nthe mean of the profit is {mean_profit_3}\")",
      ""
    ]
  },
  "npds": {
    "prefix": "npds",
    "description": "",
    "body": [
      "NUM_ROLLS = 101",
      "",
      "values = [1, 2, 3]",
      "probs = [0.2,0.4,0.4]",
      "",
      "# Draw a weighted sample",
      "sample = np.random.choice(values, NUM_ROLLS, p=probs)",
      "sample",
      ""
    ]
  },
  "vu": {
    "prefix": "vu",
    "description": "",
    "body": [
      "#include <vector>",
      "using namespace std;",
      ""
    ]
  }
}